<!-- 
STRICT OUTPUT RULES:
- Do not add any introduction, meta-commentary, or explanation.
- Never wrap the entire response in a code block.
- Only use code blocks for code/output sections as shown.
- Do not add "---" at the beginning or end.
- Use each heading as below, with only the required content under it.
- CRITICAL: The chapter title format "## {{CHAPTER_INDEX}}.- {{CHAPTER_TITLE}}" must be preserved exactly as shown, including the spacing and punctuation.
- CRITICAL: The chapter title MUST use ".-" (dot hyphen) between the index and title, NOT just a single dot.
- CRITICAL: In Related Chapters section, ONLY use plain text chapter names in quotes, NO markdown links or URLs.
- CORRECT format examples:
  ## 1.- Introduction
  ## 2.- Advanced Topics
- INCORRECT format examples (DO NOT USE):
  ## 1. Introduction
  ## 2. Advanced Topics
-->

You are an engineer with with a large expertise teaching.
Write a single "{{CATEGORY}}" document about "{{CHAPTER_TITLE}}" with "{{TOPIC}}".
Your target audience is at the {{EXPERTISE_LEVEL}} level.

<!-- Audience-based response guidelines for {{TOPIC}}:
- NOVICE: 
  * Focus on basic {{TOPIC}} concepts and their practical applications
  * Explain {{CHAPTER_TITLE}} using simple, topic-specific examples
  * Break down {{TOPIC}} concepts into fundamental building blocks
  * Show how {{CHAPTER_TITLE}} fits into the broader {{TOPIC}} ecosystem

- INTERMEDIATE:
  * Build upon basic {{TOPIC}} knowledge
  * Show how {{CHAPTER_TITLE}} connects with other {{TOPIC}} concepts
  * Include practical {{TOPIC}}-specific examples and use cases
  * Explain the "why" behind {{TOPIC}} best practices

- ADVANCED:
  * Focus on {{TOPIC}} optimization and best practices
  * Discuss {{TOPIC}}-specific edge cases and complex scenarios
  * Include {{TOPIC}} performance considerations and trade-offs
  * Show advanced {{TOPIC}} patterns and techniques

- EXPERT:
  * Dive deep into {{TOPIC}} implementation details
  * Focus on cutting-edge {{TOPIC}} approaches
  * Discuss complex {{TOPIC}} system interactions
  * Cover {{TOPIC}} performance implications and scalability
-->

Your response must include, in this order:

<!-- DO NOT MODIFY THIS LINE - IT MUST BE PRESERVED EXACTLY AS IS -->
## {{CHAPTER_INDEX}}.- {{CHAPTER_TITLE}}

### Context  
<!-- 
Briefly describe a real-world scenario, domain, or use case where this advice, technique, or concept is relevant or valuable.
State the conditions, project type, workflow, or common challenge that makes this chapter important, whether it's a trick, usage, hack, or mistake.
Provide 10-20 sentences only. DO NOT add generic, filler, or hypothetical language. After you finish, immediately continue to the next section.
**Examples:**  
- Used in production systems where zero-downtime is required.  
- Relevant when working with large datasets that exceed memory capacity.  
-->

### Problem  
<!-- 
Describe the specific issue or inefficiency. Focus only on what's directly relevant to "{{CHAPTER_TITLE}}".
Use 10-20 sentences only. Do NOT repeat information from other sections. After you finish, immediately continue to the next section.
-->

#### Before (Naive/Problematic Code)
<!-- 
Provide a code example that demonstrates the issue or naive solution. 
Only include code—no paragraphs, explanations, or extra commentary.
Use fenced code blocks for code only. After you finish, immediately continue to the next section.
-->

##### Output
<!-- 
Show the output or result from the above code.
Only include output—no paragraphs, explanations, or extra commentary.
Use fenced code blocks for output only. After you finish, immediately continue to the next section.
-->

#### After (Expert Solution)
<!-- 
Provide an improved or corrected code example that solves the problem.
Only include code—no paragraphs, explanations, or extra commentary.
Use fenced code blocks for code only. After you finish, immediately continue to the next section.
-->

##### Output
<!-- 
Show the output or result from the improved code.
Only include output—no paragraphs, explanations, or extra commentary.
Use fenced code blocks for output only. After you finish, immediately continue to the next section.
-->

### How It Works  
<!-- 
Explain what changed and why this works better.
Provide 10-20 concise bullet points. Do NOT write paragraphs, summaries, or repeated information. After you finish, immediately continue to the next section.
-->

### Applicability / When to Use
<!-- 
List 10 to 30 concise bullet points describing the scenarios, projects, or contexts where this chapter, trick, usage, hack, or approach is most appropriate or valuable.
Be specific, avoid paragraphs or vague statements. After you finish, immediately continue to the next section.
**Examples:**  
- Ideal for high-traffic APIs requiring rapid response times  
- Best used in data processing pipelines with large, batch inputs  
- Helpful when working with microservices architectures  
-->

### When Not to Use / Anti-Patterns
<!-- 
List 10 to 30 bullet points highlighting situations, project types, or contexts where this approach is not recommended, may cause issues, or is commonly misapplied.
Do not write paragraphs or general advice; be direct and specific. After you finish, immediately continue to the next section.
**Examples:**  
- Not suitable for real-time data streams  
- Avoid in low-memory environments  
- Should not be used with synchronous-only libraries  
-->

### Common Mistakes
<!-- 
List 2 to 15 specific, concise mistakes, pitfalls, or common errors users make when attempting this chapter, trick, usage, or hack.
Each mistake should be a short bullet point, not a paragraph, and should avoid general or vague language. After you finish, immediately continue to the next section.
**Examples:**  
- Forgetting to handle edge cases in user input  
- Not validating API responses before processing  
- Overwriting global state without proper locking  
- Missing required dependencies in the deployment environment  
-->

### Tradeoffs / Limitations
<!-- 
List 2 to 15 specific drawbacks, tradeoffs, or limitations as concise bullet points.
DO NOT write paragraphs, summaries, or generic advice.
DO NOT repeat ideas.
After you finish, immediately continue to the next section.
**Examples:**  
- Requires large user data volume to be effective  
- May increase computational overhead  
- Not supported in older Python versions  
-->

### Real-World Example / Case Study
<!-- 
Generate a specific real-world application, case study, or anecdote demonstrating the value of this chapter {{CATEGORY}}.

#### Problem Description
Describe the specific business or technical challenge faced in the real-world scenario. Explain in detail

#### Initial Code / Problematic Implementation
Show the code that was causing issues or was inefficient.
Only include code—no paragraphs, explanations, or extra commentary.
Use fenced code blocks for code only.
Explain in detail

##### Output
Show the problematic output or results.
Only include output—no paragraphs, explanations, or extra commentary.
Use fenced code blocks for output only.

#### Solution Implementation
Show how the solution was implemented in the real-world scenario.
Only include code—no paragraphs, explanations, or extra commentary.
Use fenced code blocks for code only.
Explain in detail

##### Output
Show the improved output or results.
Only include output—no paragraphs, explanations, or extra commentary.
Use fenced code blocks for output only.

#### Results and Impact
Describe the measurable outcomes and business impact of implementing this solution.
Use 5-10 sentences to highlight key metrics, improvements, or benefits achieved.
Explain in detail

**Examples:**  
- At CompanyX, adopting this approach reduced incident response times by 60%.  
- This method enabled a team to migrate legacy data with zero downtime.  
- In production, this trick prevented a major outage caused by unhandled exceptions.  
-->

### References / Further Reading
<!-- 
List 5 to 10 concise references, links, docs, papers, or official resources for readers to explore more.
Do not add unrelated links or marketing. Use markdown links where appropriate. After you finish, immediately continue to the next section.
**Examples:**  
- [FastAPI Error Handling Docs](https://fastapi.tiangolo.com/tutorial/handling-errors/)  
- RFC 7807: Problem Details for HTTP APIs  
- [Official Python Logging Guide](https://docs.python.org/3/howto/logging.html)  
-->

### Related Chapters / See Also
<!-- 
List 5 to 10 related chapters, tricks, usages, hacks, or sections from your ebook that connect or add value to this entry.
CRITICAL: Use ONLY plain text chapter names in quotes, NO markdown links or URLs.
Format each entry as: "- Chapter Name in Quotes"
After you finish, immediately continue to the next section.
**Examples:**  
- "Async Error Handling in FastAPI"  
- "API Versioning Best Practices"  
- "Efficient Batch Processing"  
-->
