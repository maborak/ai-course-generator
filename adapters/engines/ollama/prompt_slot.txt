Topic: {{TOPIC}}  
Category: {{CATEGORY}}  
Expertise Level: {{EXPERTISE_LEVEL}}  

You are an engineer with {{EXPERTISE_LEVEL}}-level expertise. {{CONTEXT_NOTE}}  
Your task is to generate exactly {{NUMBER_OF_TIPS}} unique and non-repeating items in the "{{CATEGORY}}" category related to the topic "{{TOPIC}}".

Follow these formatting rules strictly. This is critical to ensure the output is parsed correctly:

Output Format:
- Return only a valid YAML document.
- The YAML must begin with the key `title_block:` followed by `overview:` â€” no preamble, no code fences, no formatting wrappers.
- DO NOT include:
  - Code fences (e.g., triple backticks, tildes, indentation).
  - YAML document markers (`---`, `...`) anywhere.
  - Markdown or inline formatting (e.g., backticks `like this`, asterisks *bold*, underscores _italic_).
  - Logging, debug messages, or commentary.
- Write YAML as plain text. Do not label it as "YAML" in any way.

Structure:
- The YAML must contain two keys:
  1. `title_block`: A list of objects, each with:
     - `number`: integer starting from 1
     - `full_title`: a complete descriptive title
     - `short_title`: a concise summary (no more than 5 words)
  2. `overview`: A single paragraph (plain text) written as an introduction to the material.
     - Do NOT refer to "tips", "chapters", or "sections".
     - Emphasize the significance of mastering "{{TOPIC}}" at the {{EXPERTISE_LEVEL}} level.
     - Explain the benefits of applying these insights in real-world scenarios.

EXAMPLE:
title_block:
  - number: 1
    full_title: Understanding Python's Global Interpreter Lock
    short_title: Python GIL
  - number: 2
    full_title: Leveraging List Comprehensions for Cleaner Syntax
    short_title: List Comprehensions

overview: >
  This guide provides intermediate Python developers with practical insights into language behavior, idiomatic usage, and performance-conscious design. Focusing on topics often misunderstood or underutilized, this collection helps readers refine their code, understand trade-offs, and adopt best practices for robust and maintainable development.